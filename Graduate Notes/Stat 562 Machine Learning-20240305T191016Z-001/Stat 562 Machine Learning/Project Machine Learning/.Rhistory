knitr::opts_chunk$set(echo = TRUE)
library(readxl)
data= read.csv('TravelInsuranceData.csv')
dim(data)
Insurance_data= data[,-1] # Removing very first column as it was not necessary in the data analysis.
# getting familier with my data set
str(Insurance_data)
colnames(Insurance_data)
sum(is.na(Insurance_data)) # This clearly shows that there is no any null value in the data set.
Insurance_data
colnames(Insurance_data)
library(readxl)
data= read.csv('TravelInsuranceData.csv')
dim(data)
Insurance_data= data[,-1] # Removing very first column as it was not necessary in the data analysis.
library(ggplot2)
library(GGally)
colnames(Insurance_data)
ggpairs(Insurance_data[,-c(2,3,6,7,8,9)])
# when logistic model is trained in the whole dataset
glm.fits=glm(TravelInsurance~., family = binomial, data=Insurance_data)
summary(glm.fits)
# Step 2: Train the logistic regression model
model= glm(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
set.seed(123)
# Step 1: Split the data into training and testing sets
sample_index= sample(1:nrow(Insurance_data), 0.7 * nrow(Insurance_data))
train_data=Insurance_data[sample_index, ]
test_data=Insurance_data[-sample_index, ]
# Step 2: Train the logistic regression model
model= glm(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
summary(model)
# Step 2: Train the logistic regression model
model= glm(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
summary(model)
set.seed(123)
# Step 3: Make predictions on the testing set
predictions= predict(model, newdata = test_data, type = "response")
predictions[1:10] #let's look at the first 10 predictions by the logistic model on the test data
test_data
set.seed(123)
# Step 3: Make predictions on the testing set
predictions= predict(model, newdata = test_data, type = "response")
predictions[1:10] #let's look at the first 10 predictions by the logistic model on the test data
set.seed(123)
# let's give the predicted model a good name of labels
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels= ifelse(predictions > 0.5, 1, 0)
predicted_labels[1:10]  # looking at the predictive level of first 10 observation by logistic regration
set.seed(123)
cm_glm=table(predicted_labels,test_data$TravelInsurance)
cm_glm
Accuracy.glm= (cm_glm[1,1]+cm_glm[2,2])/(cm_glm[1,1]+cm_glm[1,2]+cm_glm[2,1]+cm_glm[2,2])
Accuracy.glm
109/(109+24)
0.8195489*100
109/(109+98)
model.fselcted= glm(TravelInsurance ~ Age +AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
summary(model.fselcted)
set.seed(123)
# Step 3: Make predictions on the testing set
predictions.fselected= predict(model.fselcted, newdata = test_data, type = "response")
predictions.fselected[1:10] #let's look at the first 10 predictions by the logistic model on the test data
set.seed(123)
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels.fselected= ifelse(predictions.fselected > 0.5, 1, 0)
predicted_labels.fselected[1:10]  # looking at the predictive level of first 10 observation by logistic regration
set.seed(123)
cm_glm.fselected=table(predicted_labels.fselected,test_data$TravelInsurance)
cm_glm.fselected
(337+109)/567
109/(109+23)
colnames(Insurance_data)
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
fitted=attributes(predict(model.fselcted,test_data,decision.values=T))$decision.values
rocplot(fitted,dat[,"TravelInsurance"])
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
fitted=attributes(predict(model.fselcted,test_data,decision.values=T))$decision.values
rocplot(fitted,test_data[,"TravelInsurance"])
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
fitted=attributes(predict(model.fselcted,test_data,decision.values=T))$decision.values
rocplot(fitted,test_data[,9])
Insurance_data$TravelInsurance
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
fitted=attributes(predict(model.fselcted,test_data,decision.values=T))$decision.values
rocplot(fitted,test_data)
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
model.fselcted= glm(TravelInsurance ~ Age +AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data, decision.values=T)
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
model.fselcted= glm(TravelInsurance ~ Age +AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
fitted=attributes(predict(model.fselcted,test_data))$decision.values
rocplot(fitted,test_data)
library(ROCR)
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
model.fselcted= glm(TravelInsurance ~ Age +AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
fitted=attributes(predict(model.fselcted,test_data,decision.values=T))$decision.values
rocplot(fitted,test_data)
test_data
library(pROC)
roc_score=roc(test_data$TravelInsurance, model.fselcted) #AUC score
predict(model.fselcted, newdata = test_data, type = "response")$decision.values
fitted=attributes(predict(model.fselcted,test_data,decision.values=T))$decision.values
fitted
predict(model.fselcted,test_data,decision.values=T)
(predict(model.fselcted,test_data,decision.values=T))$decision.values
attributes(predict(model.fselcted,test_data,decision.values=T))
fitted=attributes(predict(predicted_labels.fselected,test_data,decision.values=T))$decision.values
# Install and load the pROC package
install.packages("pROC")
library(pROC)
# Step 4: Create ROC curve
roc_curve_glm.fselected <- roc(test_data$TravelInsurance, predictions.fselected)
# Step 5: Plot the ROC curve
plot(roc_curve_glm.fselected, main = "ROC Curve - Logistic Regression",
col = "blue", lwd = 2, cex.main = 1.2,
ylim=c(0,1), xlim=c(0,1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
# Step 6: Add a diagonal reference line
abline(a = 0, b = 1, col = "red", lty = 2)
# Step 7: Add AUC (Area Under the Curve) to the plot
auc_value <- auc(roc_curve_glm.fselected)
legend("bottomright", legend = paste("AUC =", round(auc_value, 3)),
col = "black", lwd = 2)
# Show the plot
install.packages("pROC")
# Install and load the pROC package
#install.packages("pROC")
library(pROC)
# Step 4: Create ROC curve
roc_curve_glm.fselected <- roc(test_data$TravelInsurance, predictions.fselected)
# Step 5: Plot the ROC curve
plot(roc_curve_glm.fselected, main = "ROC Curve - Logistic Regression",
col = "blue", lwd = 2, cex.main = 1.2,
ylim=c(0,1), xlim=c(0,1),
xlab = "False Positive Rate",
ylab = "True Positive Rate")
# Step 6: Add a diagonal reference line
abline(a = 0, b = 1, col = "red", lty = 2)
# Step 7: Add AUC (Area Under the Curve) to the plot
auc_value <- auc(roc_curve_glm.fselected)
legend("bottomright", legend = paste("AUC =", round(auc_value, 3)),
col = "black", lwd = 2)
# Show the plot
fitted=attributes(predict(model.fselcted,train_data,decision.values=T))$decision.values
library(ROCR)
rocplot=function(pred, truth){
predob = prediction (pred, truth)
perf = performance (predob,"tpr","fpr")
plot(perf)}
fitted=attributes(predict(model.fselcted,train_data,decision.values=T))$decision.values
rocplot(fitted,train_data$TravelInsurance)
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
fitted <- attributes(predict(model.fselcted, newdata = test_data, type = "response"))$response
rocplot(fitted, test_data$TravelInsurance)
test_data[,9]
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
fitted <- attributes(predict(model.fselcted, newdata = test_data, type = "response"))$response
rocplot(fitted, test_data[,9])
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions.fselected <- predict(model.fselcted, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted <- as.numeric(predictions.fselected)
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels.fselected <- ifelse(fitted > 0.5, 1, 0)
# Display the ROC plot
rocplot(predicted_labels.fselected, test_data$TravelInsurance)
predictions.fselected
fitted
predictions.fselected
fitted
predicted_labels.fselected
# Display the ROC plot
rocplot(predicted_labels.fselected, test_data$TravelInsurance)
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions.fselected <- predict(model.fselcted, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted <- as.numeric(predictions.fselected)
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels.fselected <- ifelse(fitted > 0.5, 1, 0)
# Display the ROC plot
rocplot(fitted, test_data$TravelInsurance)
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions.fselected <- predict(model.fselcted, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted <- as.numeric(predictions.fselected)
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels.fselected <- ifelse(fitted > 0.5, 1, 0)
# Display the ROC plot
rocplot(fitted, test_data$TravelInsurance)
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions.fselected <- predict(model.fselcted, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted <- as.numeric(predictions.fselected)
# Display the ROC plot
rocplot(fitted, test_data$TravelInsurance)
perf
performance(fitted)
performance(fitted, "tpr", "fpr")
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions.fselected <- predict(model.fselcted, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted <- as.numeric(predictions.fselected)
# Display the ROC plot
rocplot(fitted, test_data$TravelInsurance)
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions.fselected <- predict(model.fselcted, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted.fselected <- as.numeric(predictions.fselected)
# Display the ROC plot
rocplot(fitted.fselected, test_data$TravelInsurance)
library(ROCR)
rocplot <- function(pred, truth) {
predob <- prediction(pred, truth)
perf <- performance(predob, "tpr", "fpr")
plot(perf)
}
# Make predictions on the testing set
predictions= predict(model, newdata = test_data, type = "response")
# Extract the predicted probabilities
fitted <- as.numeric(predictions)
# Display the ROC plot
rocplot(fitted, test_data$TravelInsurance)
set.seed(123)
#install.packages("MASS")
library(MASS)
lda.out=lda(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad, data = train_data)
lda.out
set.seed(123)
#install.packages("MASS")
library(MASS)
lda.out=lda(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad, data = train_data)
summary(lda.out)
set.seed(123)
#install.packages("MASS")
library(MASS)
lda.out=lda(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad, data = train_data)
lda.out
set.seed(123)
#install.packages("MASS")
library(MASS)
lda.out=lda(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad, data = train_data)
lda.out
set.seed(123)
plot(lda.out)
set.seed(123)
lda.pred <- predict(lda.out , test_data)
names(lda.pred)
lda.pred$class[1:10] # What LDA predict for first 10 observation
set.seed(123)
lda.class <- lda.pred$class
table(lda.class, test_data$TravelInsurance)
dim(test_data)
(335+104)/567
0.7742504*100
104/(104+25)
0.8062016*100
104/(104+103)
0.5024155*100
