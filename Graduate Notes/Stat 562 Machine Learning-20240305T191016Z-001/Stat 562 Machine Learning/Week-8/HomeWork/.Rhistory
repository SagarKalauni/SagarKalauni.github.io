rect(150, 305, 240, 365, col='Red')
rect(250, 305, 340, 365, col='green')
text(140, 400, 'Class1', cex=1.2, srt=90)
text(140, 335, 'Class2', cex=1.2, srt=90)
# add in the cm results
res <- as.numeric(cm$table)
text(195, 400, res[1], cex=1.6, font=2, col='white')
text(195, 335, res[2], cex=1.6, font=2, col='white')
text(295, 400, res[3], cex=1.6, font=2, col='white')
text(295, 335, res[4], cex=1.6, font=2, col='white')
# add in the specifics
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cm$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cm$byClass[1]), 3), cex=1.2)
text(30, 85, names(cm$byClass[2]), cex=1.2, font=2)
text(30, 70, round(as.numeric(cm$byClass[2]), 3), cex=1.2)
text(50, 85, names(cm$byClass[5]), cex=1.2, font=2)
text(50, 70, round(as.numeric(cm$byClass[5]), 3), cex=1.2)
text(70, 85, names(cm$byClass[6]), cex=1.2, font=2)
text(70, 70, round(as.numeric(cm$byClass[6]), 3), cex=1.2)
text(90, 85, names(cm$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cm$byClass[7]), 3), cex=1.2)
# add in the accuracy information
text(30, 35, names(cm$overall[1]), cex=1.5, font=2)
text(30, 20, round(as.numeric(cm$overall[1]), 3), cex=1.4)
text(70, 35, names(cm$overall[2]), cex=1.5, font=2)
text(70, 20, round(as.numeric(cm$overall[2]), 3), cex=1.4)
}
summary(Insurance_data)
par(mfrow=c(1,2))
no_count=table(Insurance_data$Employment.Type)
barplot(no_count, main = "Barplot for Employment \n Type distribution", col = c("white", "cyan"))
pie(no_count, main = "Pie chart for Employment \n Type distribution", col = c("white", "cyan"))
no_count
par(mfrow=c(1,1))
par(mfrow=c(1,2))
grad_no=table(Insurance_data$GraduateOrNot)
pie(grad_no, main = "Pie chart for Whether the customer \n is college graduate or not", col = c("white", "green3"))
barplot(grad_no, main = "Barplot for Whether the customer \n is college graduate or not", col = c("white", "green3"))
grad_no
par(mfrow=c(1,1))
par(mfrow=c(1,2))
dise_cum_no=table(Insurance_data$ChronicDiseases)
dise_cum_no
x=c("0","1")
names(x)=c("No","Yes")
pie(dise_cum_no, main = "Pie chart for Whether the \n customer suffers from any major disease", labels = names(x))
barplot(dise_cum_no, main = "Barplot for Whether the \n customer suffers from any major disease")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
cum_no=table(Insurance_data$FrequentFlyer)
cum_no
pie(cum_no, main = "Pie chart for Whether the \n customer is frequent flyer or not", col = c("white", "violetred1"))
barplot(cum_no, main = "Barplot for Whether the \n customer is frequent flyer or not", col = c("white", "violetred1"))
par(mfrow=c(1,1))
par(mfrow=c(1,2))
trav_cum_no=table(Insurance_data$TravelInsurance)
trav_cum_no
x=c("0","1")
names(x)=c("No","Yes")
pie(trav_cum_no, main = "Pie chart for did customer \n purchase travel insurance in 2019", col = c("white", "violet"), labels = names(x) )
barplot(trav_cum_no, main = "Barplot forfor did customer \n purchase travel insurance in 2019", col = c("white", "violet"))
par(mfrow=c(1,1))
library(ggplot2)
g = ggplot(data=Insurance_data,aes(x=Employment.Type))
g+ geom_bar(aes(fill=GraduateOrNot)) +
labs(y = "Frequency", x= "Customer employment Type")
barplot(table(Insurance_data$Employment.Type, Insurance_data$TravelInsurance),
beside = T,
legend.text = T,
xlab = "Travel insurance purchase status",
ylab = "Frequency",
main = "Employment type vs insurance purchased ", col = c("#00abff", "cyan"))
barplot(table(Insurance_data$GraduateOrNot, Insurance_data$TravelInsurance),
beside = T,
legend.text = T,
xlab = "Travel insurance purchase status",
ylab = "Frequency",
main = "Was Customer graduated vs insurance purchased ", col = c("green", "cyan"))
barplot(table(Insurance_data$ChronicDiseases, Insurance_data$TravelInsurance),
beside = T,
legend.text = T,
xlab = "Travel insurance purchase status",
ylab = "Frequency",
main = "Customer having major diseases vs insurance purchased ", col = c("violet", "#00abff"))
barplot(table(Insurance_data$FrequentFlyer, Insurance_data$TravelInsurance),
beside = T,
legend.text = T,
xlab = "Travel insurance purchase status",
ylab = "Frequency",
main = "Was Customer Frequent flyer vs insurance purchased ")
barplot(table(Insurance_data$EverTravelledAbroad, Insurance_data$TravelInsurance),
beside = T,
legend.text = T,
xlab = "Travel insurance purchase status",
ylab = "Frequency",
main = "Has Customer ever travelled abroad vs insurance purchased ")
par(mfrow=c(1,2))
hist(Insurance_data$Age,
xlab = "Age",
main = "histogram of Age", breaks=10)
boxplot(Insurance_data$Age,ylim=c(20,40),ylab="Age")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
hist(Insurance_data$AnnualIncome,
xlab = "Annual income",
main = "histogram of Annual income", breaks=25)
boxplot(Insurance_data$AnnualIncome,ylim=c(200000,2000000),ylab="Annual Income")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
hist(Insurance_data$FamilyMembers,
xlab = "Annual income",
main = "histogram of Family members", breaks=5)
boxplot(Insurance_data$FamilyMembers,ylim=c(1,10),ylab="Annual Income")
par(mfrow=c(1,1))
boxplot(Insurance_data$AnnualIncome~Insurance_data$TravelInsurance,ylab="Annual income of customer",xlab="Travel insurance purchase status")
boxplot(Insurance_data$FamilyMembers~Insurance_data$TravelInsurance,ylab="No. of family members of customer",xlab="Travel insurance purchase status")
boxplot(Insurance_data$Age~Insurance_data$TravelInsurance,ylab="Age of customer",xlab="Travel insurance purchase status")
barplot(table(Insurance_data$TravelInsurance, Insurance_data$Age),
beside = T,
legend.text = T,
xlab = "Age of the customer",
ylab = "Frequency",
main = "Customers age vs insurance purchased status")
barplot(table(Insurance_data$TravelInsurance, Insurance_data$FamilyMembers),
beside = T,
legend.text = T,
xlab = "Number of family member of customer",
ylab = "Frequency",
main = "Number of family member of customer vs insurance purchased status")
barplot(table(Insurance_data$TravelInsurance, Insurance_data$AnnualIncome),
beside = T,
legend.text = T,
xlab = "Annual income of customer",
ylab = "Frequency",
main = "Annual income of customer vs insurance purchased status")
mosaicplot(table(Insurance_data$Employment.Type,Insurance_data$TravelInsurance),xlab = "Customer employment type", ylab = "Travel insurance purchase status")
mosaicplot(table(Insurance_data$GraduateOrNot,Insurance_data$TravelInsurance), xlab = "College graduate or not",ylab ="Travle insurance purchase status")
mosaicplot(table(Insurance_data$ChronicDiseases,Insurance_data$TravelInsurance), xlab = "Customer has any major disease",ylab ="Travle insurance purchase status")
mosaicplot(table(Insurance_data$FrequentFlyer,Insurance_data$TravelInsurance), xlab = "Was Customer a frequent flyer",ylab ="Travle insurance purchase status")
mosaicplot(table(Insurance_data$EverTravelledAbroad,Insurance_data$TravelInsurance), xlab = "Has Customer ever travelled abroad",ylab ="Travle insurance purchase status")
cor(Insurance_data[,1],Insurance_data[,4])
cor(Insurance_data[,4],Insurance_data[,5])
library(ggplot2)
library(GGally)
ggpairs(Insurance_data[,-c(2,3,6,7,8,9)])
set.seed(123)
# Step 1: Split the data into training and testing sets
sample_index= sample(1:nrow(Insurance_data), 0.7 * nrow(Insurance_data))
train_data=Insurance_data[sample_index, ]
test_data=Insurance_data[-sample_index, ]
# All the variable as the predictor
# Step 2: Train the logistic regression model
model= glm(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
summary(model)
set.seed(123)
# Step 3: Make predictions on the testing set
predictions= predict(model, newdata = test_data, type = "response")
predictions[1:10] #let's look at the first 10 predictions by the logistic model on the test data
set.seed(123)
# let's give the predicted model a good name of labels
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels= ifelse(predictions > 0.5, 1, 0)
predicted_labels[1:10]  # looking at the predictive level of first 10 observation by logistic regration
set.seed(123)
cm_glm=table(predicted_labels,test_data$TravelInsurance)
cm_glm
# Assuming predicted_labels.fselected is a factor
predicted_labels <- as.factor(predicted_labels)
# Assuming test_data$TravelInsurance is a factor
test_data$TravelInsurance <- as.factor(test_data$TravelInsurance)
# Now, create the confusion matrix
cm1 <- confusionMatrix(predicted_labels, test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm1)
model.fselcted= glm(TravelInsurance ~ Age +AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad,
family = binomial, data = train_data)
summary(model.fselcted)
set.seed(123)
# Step 3: Make predictions on the testing set
predictions.fselected= predict(model.fselcted, newdata = test_data, type = "response")
predictions.fselected[1:10] #let's look at the first 10 predictions by the logistic model on the test data
set.seed(123)
# Convert predicted probabilities to binary predictions (0 or 1)
predicted_labels.fselected= ifelse(predictions.fselected > 0.5, 1, 0)
predicted_labels.fselected[1:10]  # looking at the predictive level of first 10 observation by logistic regration
set.seed(123)
cm_glm.fselected=table(predicted_labels.fselected,test_data$TravelInsurance)
cm_glm.fselected
# Assuming predicted_labels.fselected is a factor
predicted_labels.fselected <- as.factor(predicted_labels.fselected)
# Assuming test_data$TravelInsurance is a factor
test_data$TravelInsurance <- as.factor(test_data$TravelInsurance)
# Now, create the confusion matrix
cm2 <- confusionMatrix(predicted_labels.fselected,test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm2)
set.seed(123)
#install.packages("MASS")
library(MASS)
lda.out=lda(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad, data = train_data)
lda.out
set.seed(123)
lda.pred=predict(lda.out , test_data)
names(lda.pred)
lda.pred$class[1:10] # What LDA predict for first 10 observation
set.seed(123)
lda.class=lda.pred$class
table(lda.class, test_data$TravelInsurance)
# create the confusion matrix
cm3 <- confusionMatrix(lda.class, test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm3)
lda.fselected=lda(TravelInsurance ~ Age + AnnualIncome + FamilyMembers
+ FrequentFlyer + EverTravelledAbroad, data = train_data)
lda.fselected
set.seed(123)
lda.pred.fselected=predict(lda.fselected , test_data)
names(lda.pred.fselected)
lda.pred.fselected$class[1:10] # What LDA predict for first 10 observation
set.seed(123)
lda.class.fselected=lda.pred.fselected$class
table(lda.class.fselected, test_data$TravelInsurance)
# create the confusion matrix
cm4 <- confusionMatrix(lda.class.fselected, test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm4)
qda.out=qda(TravelInsurance ~ Age + Employment.Type + GraduateOrNot + AnnualIncome + FamilyMembers +
ChronicDiseases + FrequentFlyer + EverTravelledAbroad, data = train_data)
qda.out
qda.pred <- predict(qda.out , test_data)
names(qda.pred)
qda.pred$class[1:10] # What QDA predict for first 10 observation
set.seed(123)
qda.class <- qda.pred$class
table(qda.class, test_data$TravelInsurance)
qda.fselected=qda(TravelInsurance ~ Age + AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad, data = train_data)
qda.fselected
qda.pred.fselected <- predict(qda.fselected , test_data)
names(qda.pred.fselected)
qda.pred.fselected$class[1:10] # What QDA predict for first 10 observation
set.seed(123)
qda.fselected.class <- qda.pred.fselected$class
table(qda.fselected.class, test_data$TravelInsurance)
# create the confusion matrix
cm5 <- confusionMatrix(qda.fselected.class, test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm5)
set.seed(123)
# cagtegorical variable as factor
Insurance_data$ChronicDiseases=as.factor(Insurance_data$ChronicDiseases)
Insurance_data$Employment.Type= as.factor(Insurance_data$Employment.Type)
Insurance_data$GraduateOrNot= as.factor(Insurance_data$GraduateOrNot)
Insurance_data$FrequentFlyer= as.factor(Insurance_data$FrequentFlyer)
Insurance_data$EverTravelledAbroad= as.factor(Insurance_data$EverTravelledAbroad)
Insurance_data$TravelInsurance= as.factor(Insurance_data$TravelInsurance)
set.seed(123)
# converting all my dataset to numeric for the model setting
Insurance_data_num <- as.data.frame(lapply(Insurance_data[,1:8], as.numeric))
library(caret)
set.seed(123)
knn_model = train(
TravelInsurance ~ .,
data = train_data,
method = "knn",
tuneLength=10,
trControl = trainControl(method = "cv", number = 10),
preProcess = c("center", "scale")
)
knn_model
set.seed(123)
Knn_pred=predict(knn_model, test_data)
Knn_pred[1:10]
set.seed(123)
table(Knn_pred, test_data$TravelInsurance)
# create the confusion matrix
cm6 <- confusionMatrix(Knn_pred, test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm6)
set.seed(123)
knn_model_fselected = train(
TravelInsurance ~ Age + AnnualIncome + FamilyMembers + FrequentFlyer +
EverTravelledAbroad,
data = train_data,
method = "knn",
tuneLength=10,
trControl = trainControl(method = "cv", number = 10),
preProcess = c("center", "scale")
)
knn_model_fselected
set.seed(123)
Knn_pred_fselected=predict(knn_model_fselected, test_data)
Knn_pred_fselected[1:10]
set.seed(123)
table(Knn_pred_fselected, test_data$TravelInsurance)
# create the confusion matrix
cm7 <- confusionMatrix(Knn_pred_fselected, test_data$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm7)
#install.packages("tree")
set.seed(12312)
library(tree)
train=sample(1:nrow(Insurance_data),1320) # We take 1320 (70% of total) for training and 567 for test
test=Insurance_data[-train,]
tree.d=tree(TravelInsurance~.,Insurance_data,split="gini",subset=train) # except TravelInsurance all other variables in the data set are be considered as predictors.
summary(tree.d)
plot(tree.d)
set.seed(12312)
pred.d=predict(tree.d, test, type="class")
pred.d[1:10] # Looking at the predicted lables for first 10 observation by this decision tree
set.seed(12312)
table(pred.d, test$TravelInsurance)
# create the confusion matrix
cm8 <- confusionMatrix(pred.d, test$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm8)
tree.fselected=tree(TravelInsurance~Age + AnnualIncome + FamilyMembers +
FrequentFlyer + EverTravelledAbroad,Insurance_data,split="gini",subset=train) # except TravelInsurance all other variables in the data set are be considered as predictors.
summary(tree.fselected)
set.seed(12312)
tree.pred.fselected=predict(tree.fselected, test, type="class")
tree.pred.fselected[1:10] # Looking at the predicted lables for first 10 observation by this decision tree
set.seed(12312)
table(tree.pred.fselected, test$TravelInsurance)
# create the confusion matrix
cm9 <- confusionMatrix(tree.pred.fselected, test$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm9)
set.seed(12312)
cv.d=cv.tree(tree.d) # using deviance as a criteria for the cross-validation
plot(cv.d$size, cv.d$dev, type = "b") # Since we have used deviance as our criteria for the cross-validation,
set.seed(12312)
names(cv.d)
cv.d
set.seed(12312)
prune.d=prune.tree(tree.d, best =6)
prune.d
set.seed(12312)
plot(prune.d)
text(prune.d)
set.seed(12312)
summary(prune.d)
set.seed(12312) #Predict class on test data
pred.d.prune=predict(prune.d,test, type = "class")
pred.d.prune[1:10]  # Looking at the prediction by this pruned tree for the first 10 observations
set.seed(12312)
table(pred.d.prune, test$TravelInsurance)
# create the confusion matrix
cm9 <- confusionMatrix(pred.d.prune, test$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm9)
set.seed(12312)
#install.packages("randomForest")
library(randomForest)
set.seed(12312)
# let's first do begging which means talking all the feature variable for mtry
beg.Insurance_data=randomForest(TravelInsurance~., data=Insurance_data, subset= train, mtry=8, importance=TRUE)
beg.Insurance_data # lets take a look at the output
yhat.bag=predict(beg.Insurance_data, newdata = test)
yhat.bag[1:10] #Looking at the prediction made by this bagging algorithm for my first 10 observation in the test data
table(yhat.bag, test$TravelInsurance)
# create the confusion matrix
cm10 <- confusionMatrix(yhat.bag, test$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm10)
set.seed(12312)
# let's first do begging which means talking all the feature variable for mtry
beg.fselected=randomForest(TravelInsurance~Age + AnnualIncome + FamilyMembers + FrequentFlyer +
EverTravelledAbroad, data=Insurance_data, subset= train, mtry=5, importance=TRUE)
beg.fselected # lets take a look at the output
yhat.bag.fselected=predict(beg.fselected, newdata = test)
yhat.bag.fselected[1:10] #Looking at the prediction made by this bagging algorithm for my first 10 observation in the test data
table(yhat.bag.fselected, test$TravelInsurance)
# create the confusion matrix
cm11 <- confusionMatrix(yhat.bag.fselected, test$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm11)
set.seed(12312)
# trying m=3
rf.Insurance_data_3=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=3, importance=TRUE)
rf.Insurance_data_3 # lets take a look at the output
set.seed(12312)
# trying m=1
rf.Insurance_data_1=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=1, importance=TRUE)
rf.Insurance_data_1 # lets take a look at the output
set.seed(12312)
# trying m=2
rf.Insurance_data_2=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=2, importance=TRUE)
rf.Insurance_data_2 # lets take a look at the output
set.seed(12312)
# trying m=4
rf.Insurance_data_4=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=4, importance=TRUE)
rf.Insurance_data_4 # lets take a look at the output
set.seed(12312)
# trying m=5
rf.Insurance_data_5=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=5, importance=TRUE)
rf.Insurance_data_5 # lets take a look at the output
set.seed(12312)
# trying m=6
rf.Insurance_data_6=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=6, importance=TRUE)
rf.Insurance_data_6 # lets take a look at the output
set.seed(12312)
# trying m=7
rf.Insurance_data_7=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=7, importance=TRUE)
rf.Insurance_data_7 # lets take a look at the output
yhat.rf=predict(rf.Insurance_data_2, newdata = test)
yhat.rf[1:10] #Looking at the prediction made by this Random forest algorithm for my first 10 observation in the test data
table(yhat.rf, test$TravelInsurance)
# create the confusion matrix
cm12 <- confusionMatrix(yhat.rf, test$TravelInsurance)
# Display the confusion matrix
draw_confusion_matrix(cm12)
set.seed(100)
#install.packages("adabag")
library(adabag)
boosting.model= boosting(TravelInsurance~., data = train_data, mfinal = 50)
boosting.pred=predict(boosting.model, test_data)$class
library(readxl)
data= read.csv('TravelInsuranceData.csv')
dim(data)
Insurance_data= data[,-1] # Removing very first column as it was not necessary in the data analysis.
Insurance_data$ChronicDiseases=as.factor(Insurance_data$ChronicDiseases)
Insurance_data$Employment.Type= as.factor(Insurance_data$Employment.Type)
Insurance_data$GraduateOrNot= as.factor(Insurance_data$GraduateOrNot)
Insurance_data$FrequentFlyer= as.factor(Insurance_data$FrequentFlyer)
Insurance_data$EverTravelledAbroad= as.factor(Insurance_data$EverTravelledAbroad)
Insurance_data$TravelInsurance= as.factor(Insurance_data$TravelInsurance)
# getting familier with my data set
str(Insurance_data)
colnames(Insurance_data)
set.seed(123)
lda.pred.fselected=predict(lda.fselected , test_data)
set.seed(123)
# Step 1: Split the data into training and testing sets
sample_index= sample(1:nrow(Insurance_data), 0.7 * nrow(Insurance_data))
train_data=Insurance_data[sample_index, ]
test_data=Insurance_data[-sample_index, ]
#install.packages("tree")
set.seed(12312)
library(tree)
train=sample(1:nrow(Insurance_data),1320) # We take 1320 (70% of total) for training and 567 for test
test=Insurance_data[-train,]
tree.d=tree(TravelInsurance~.,Insurance_data,split="gini",subset=train) # except TravelInsurance all other variables in the data set are be considered as predictors.
set.seed(12312)
#install.packages("randomForest")
library(randomForest)
set.seed(12312)
# let's first do begging which means talking all the feature variable for mtry
beg.fselected=randomForest(TravelInsurance~Age + AnnualIncome + FamilyMembers + FrequentFlyer +
EverTravelledAbroad, data=Insurance_data, subset= train, mtry=5, importance=TRUE)
beg.fselected # lets take a look at the output
set.seed(12312)
# trying m=2
rf.Insurance_data_2=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=2, importance=TRUE)
rf.Insurance_data_2 # lets take a look at the output
set.seed(12312)
# trying m=2
rf.Insurance_data_2=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=2, importance=TRUE)
rf.Insurance_data_2 # lets take a look at the output
yhat.rf_org=predict(rf.Insurance_data_2, newdata = Main_test_data)
library(readxl)
Original_test_data= read.csv("C:/Users/Dell/Desktop/Stat 562 Machine Learning/Project Machine Learning/TravelInsuranceTest.csv")
Main_test_data=Original_test_data[,-1]
Main_test_data$ChronicDiseases=as.factor(Main_test_data$ChronicDiseases)
Main_test_data$Employment.Type= as.factor(Main_test_data$Employment.Type)
Main_test_data$GraduateOrNot= as.factor(Main_test_data$GraduateOrNot)
Main_test_data$FrequentFlyer= as.factor(Main_test_data$FrequentFlyer)
Main_test_data$EverTravelledAbroad= as.factor(Main_test_data$EverTravelledAbroad)
Main_test_data$TravelInsurance= as.factor(Main_test_data$TravelInsurance)
set.seed(12312)
# trying m=2
rf.Insurance_data_2=randomForest(TravelInsurance~., data=Insurance_data, subset=train, mtry=2, importance=TRUE)
rf.Insurance_data_2 # lets take a look at the output
yhat.rf_org=predict(rf.Insurance_data_2, newdata = Main_test_data)
yhat.rf_org
table(yhat.rf_org)
Main_test_data
Main_test_data
# Assuming your dataframe is named df
library(dplyr)
Main_test_data_values <- Main_test_data %>%
mutate(Main_test_data$TravelInsurance = yhat.rf_org)
# Assuming your dataframe is named df
library(dplyr)
Main_test_data_values <- Main_test_data %>%
mutate(Main_test_data$TravelInsurance == yhat.rf_org)
Main_test_data_values
Main_test_data_values
Main_test_data
# Assuming your dataframe is named df
library(dplyr)
Main_test_data_values =mutate(Main_test_data, Main_test_data$TravelInsurance=Main_test_data$TravelInsurance+yhat.rf_org)
# Assuming your dataframe is named df
library(dplyr)
Main_test_data <- Main_test_data %>%
mutate(TravelInsurance = coalesce(TravelInsurance, yhat.rf_org))
Main_test_data
Main_test_data %>% group_by(Main_test_data$TravelInsurance)
Main_test_data
count(Main_test_data$TravelInsurance==1)
count_ones <- sum(Main_test_data$TravelInsurance == 1)
count_ones
count_ones <- sum(Main_test_data$TravelInsurance == 0)
count_ones
install.packages("writexl")
library(writexl)
write_xlsx(Main_test_data, path = "C:/Users/Dell/Desktop/Stat 562 Machine Learning/Project Machine Learning/TravelInsuranceTest.csv")
